/*
 * Recipe- a blueprint class for representing recipe objects
 * 
 */

public class Recipe {
    private String name;
    private String source;
    private Ingredient[] recipe;
    private int ingredientCount;
    
    /*Constructor
     */
    public Recipe (String name, String source, int number) {
        if ((name == null) || (name.length() == 0)) {
            throw new IllegalArgumentException();
        }
        this.name=name;
        
        this.source=source;
        
        if (number<=0) {
            throw new IllegalArgumentException();
        }
        
        this.recipe= new Ingredient[number];
        
        ingredientCount=0;
        
    }
    
    /*toString- returns in the form "name-source"
     */
    
    public String toString () {
        if (this.source==null) {
            return this.name;
        } else {
            String str= this.name + " - " + this.source;
            return str;
        }
    }
    
    /*addIngredient- takes an Ingredient object as a parameter
     * and adds the specified ingredient to the recipe.
     */
    public void addIngredient (Ingredient i) {
        if ((i==null) || (this.ingredientCount == this.recipe.length)) {
            throw new IllegalArgumentException();
        }
        
        this.recipe[this.ingredientCount] = i;
        this.ingredientCount++;
    }
    
    /*getName- returns the name of the recipe's name as a string
     */
    public String getName() {
        return this.name;
    }
    
    /*getSource- returns the recipe's source as a string
     */
    public String getSource() {
        return this.source;
    }
    
    /*getIngredientCount- gets the count of the current ingredients
     * in the array.
     */
    public int getIngredientCount() {
        return this.ingredientCount;
    }
    
    /*getIngredient- takes an integer parameter representing an index and returns
     * the Ingredient object at the position in the recipe array.
     */
    public Ingredient getIngredient (int i) {
        if (i<0 || i>=this.ingredientCount) {
            throw new IllegalArgumentException();
        }
        
        return this.recipe[i];
    }
    
    /*printIngredients- takes no parameters and print's the recipe's ingredients
     */
    public void printIngredients () {
        if(this.ingredientCount <= 0) {
            for (int i = 0; i < recipe.length; i++) {
                System.out.println("    " + this.recipe[i].getName());
            }
        } 
    }
    
    /*scaleBy- takes a scale factor and scales each ingredient by the specified amount
     */
    public void scaleBy (double value) {
        if(this.ingredientCount <= 0) {
            for(int i = 0; i < recipe.length; i++) {
                this.recipe[i].scaleBy(value);
            }
        }
    }
    
    
}

/*
 * FloridaRecount.java
 * 
 * starter code by Computer Science 111
 * 
 * completed by: Hansheng Shou
 * email: sshou@bu.edu
 * 
 * description: an application that uses arrays to
 * process a data file of information about uncounted
 * ballots from the 2000 presidential election in Florida.
 */

import java.util.*;
import java.io.*;

public class FloridaRecount { 
    
    public static void main (String[] args) 
        throws FileNotFoundException {
        Scanner console= new Scanner(System.in);
        int [] bushCounts= new int[COUNTIES.length];
        int [] goreCounts= new int[COUNTIES.length];
        int choice=0;
        
        System.out.println ("Welcome to the Florida Recount Calculator");
        System.out.println ("");
        System.out.println("Possible recount standards:");
        System.out.println(" 1) only count filled ovals and fully detached chads");
        System.out.println(" 2) count any sign of intent");
        System.out.print("Which standard do you want to use?");
        choice= console.nextInt();
        System.out.println("Votes gained by county:");
        System.out.println("                     Bush      Gore");
        
        if(choice==1) {
            standard1(bushCounts, goreCounts);
        }
        else if (choice==2) {
            standard2(bushCounts, goreCounts);
        }
        
        System.out.println("Final results:");
        System.out.print ("  Bush: ");
        
        /*Calculates the sum of the arrays of bushCount and goreCount with
         * their certified votes.
         */
        int sum = 0;
        for (int i=0; i < bushCounts.length; i++){
            sum+=bushCounts[i];
        }
        System.out.println((sum+CERTIFIED_BUSH) + " " + "votes");
        
        System.out.print("  Gore: ");
        int sum2= 0;
        for (int j=0; j<goreCounts.length; j++){
            sum2+=goreCounts[j];
        }
        System.out.println((sum2+CERTIFIED_GORE) + " " + "votes");
        
        if ((sum+CERTIFIED_BUSH)>(sum2+CERTIFIED_GORE)) {
            System.out.println("Bush wins by" + " " + ((sum+CERTIFIED_BUSH) - (sum2+CERTIFIED_GORE)) + " " + "votes.");
        } else if((sum2+CERTIFIED_GORE)>(sum+CERTIFIED_BUSH)) {
            System.out.println("Gore wins by" + " " + ((sum2+CERTIFIED_GORE) - (sum+CERTIFIED_BUSH)) + " " + "votes.");
        }
                           
                                                     
        
        
    }
    
    
    public static final String FILE_NAME = "recount.txt";
    public static final int NUM_REVIEWERS = 3;
    public static final int CERTIFIED_BUSH = 2912790;
    public static final int CERTIFIED_GORE = 2912253;
    
    public static final String[] COUNTIES = {"Broward", "Miami-Dade", "Palm Beach", "Volusia"};
    public static final boolean[] USED_PUNCH_BALLOTS = {true, true, true, false};
    
    /*
     * printCounty - prints the name of a county with the correct
     * amount of padding so that the results will line up in columns.
     */
    public static void printCounty(String name) {
        System.out.printf("%-12.12s\t", name);
    }
    
    public static int getCountyNum(String countyName) {
        // Add code to return the index of the specified county
        // in the COUNTIES array.
        for (int i=0; i<COUNTIES.length; i++) {
            if (countyName .equals (COUNTIES[i])) {
                return i;
            }
        }        
        return -1;
    }
    
    /*standard1- This method counts the ballots of each county using 
     * the two strict standards to determine if the vote counts.
     */
    
    public static void standard1 (int [] bushCounts, int [] goreCounts)
        throws FileNotFoundException{
        Scanner input = new Scanner (new File("recount.txt"));
        input.useDelimiter("\t|\r\n|\n|\r");
        while (input.hasNext()) {
            String county = input.next();
            
            int numCodesBush=0;
            int numCodesGore=0;
            int county_num= getCountyNum(county);
            
            /* Method used to know which county is used and which standard.
             */
            
            if (USED_PUNCH_BALLOTS [county_num]) {
                
                
                for (int i=0; i<NUM_REVIEWERS; i++) {
                    int bushCode= input.nextInt();
                    int goreCode= input.nextInt();
                    
                    if ((bushCode==4) && (goreCode!=4)) {
                        numCodesBush++;
                    }
                    else if ((goreCode==4) && (bushCode!=4)) {
                        numCodesGore++;
                    }
                    
                    
                }
                
            }
            else {
                for (int i=0; i<NUM_REVIEWERS; i++) {
                    int bushCode= input.nextInt();
                    int goreCode= input.nextInt();
                    
                    if ((bushCode==44) && (goreCode!=44)) {
                        numCodesBush++;
                    }
                    else if ((goreCode==44) && (bushCode!=44)) {
                        numCodesGore++;
                    }  
                }
            }
            
            
            if (numCodesBush == NUM_REVIEWERS) {
                bushCounts [county_num]+=1;
            } else if (numCodesGore == NUM_REVIEWERS) {
                goreCounts[county_num]+=1;
            }
            
        }
        printResults( bushCounts, goreCounts);
        
    }
    
    /*standard2- This method counts the ballots for each county using 
     * the two lax criteria to determine if the vote counts.
     */
    
    public static void standard2 (int [] bushCounts, int [] goreCounts)
        throws FileNotFoundException{
        Scanner input = new Scanner (new File("recount.txt"));
        input.useDelimiter("\t|\r\n|\n|\r");
        while (input.hasNext()) {
            String county = input.next();
            
            int numCodesBush=0;
            int numCodesGore=0;
            int county_num= getCountyNum(county);
            
            /* Method used to know which county is used.
             */
            
            if (USED_PUNCH_BALLOTS [county_num]) {
                
                
                for (int i=0; i<NUM_REVIEWERS; i++) {
                    int bushCode= input.nextInt();
                    int goreCode= input.nextInt();
                    
                    if ((bushCode>0) && (goreCode<=0)) {
                        numCodesBush++;
                    }
                    else if ((goreCode>0) && (bushCode<=0)) {
                        numCodesGore++;
                    }
                    
                    
                }
                
            }
            else {
                for (int i=0; i<NUM_REVIEWERS; i++) {
                    int bushCode= input.nextInt();
                    int goreCode= input.nextInt();
                    
                    if ((bushCode>0) && (bushCode!=99) && (goreCode<=0)) {
                        numCodesBush++;
                    }
                    else if ((goreCode>0) && (goreCode!=99) && (bushCode<=0)) {
                        numCodesGore++;
                    }  
                }
            }
            
            
            if (numCodesBush == NUM_REVIEWERS) {
                bushCounts [county_num]+=1;
            } else if (numCodesGore == NUM_REVIEWERS) {
                goreCounts[county_num]+=1;
            }
            
        }
        printResults( bushCounts, goreCounts);
        
    }
    
    /*printResults- this uses a for loop to print the results of each county
     * for Bush and Gore.
     */
    
    public static void printResults (int [] bushCounts, int [] goreCounts) {
        for (int i=0; i<COUNTIES.length; i++) {
            System.out.println(COUNTIES[i] +  "\t" + "\t" + bushCounts[i] +  "\t" + goreCounts[i]);
        }
        
    }
    
}


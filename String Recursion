/*
 * StringRecursion.java
 *
 * starter code by: Computer Science 111, Boston University
 * 
 * modified by: Hansheng Shou
 * username: sshou@bu.edu
 *
 * A class that contains recursive methods that operate on strings.
 */

public class StringRecursion {
    /* 
     * You may want to add test code for your methods to this
     * main method, although doing so is not required. 
     * See the section of the assignment entitled
     * "Testing your methods".
     * 
     * IMPORTANT: If your method does not return anything
     * (i.e., it is a void method), you should NOT try
     * to call it from within a println command. Instead,
     * you should call it on its own line -- for example:
     *     printSeries(3, 8);
     */
    public static void main(String[] args) {
        System.out.println("test 1 gives: " + numOccur('s', "Mississippi"));
        System.out.println("test 2 gives: " + numOccur('e', "Mississippi"));                   
        System.out.println("test 3 gives: " + removeVowels("Mississippi"));
        System.out.println("test 4 gives: " + removeVowels("apple"));                   
    }
    
    /*
     * numOccur - a recursive method that returns the number of times 
     * that the character ch occurs in the String str.
     * 
     * The main method includes two examples of using this method.
     *
     * You can also test this method by entering
     * StringRecursion.numOccur(ch, str) -- where ch is replaced 
     * by a char and str is replaced by a string -- in the 
     * Interactions Pane.
     */
    public static int numOccur(char ch, String str) {
        // base case
        if (str == null || str.equals("")) {
            return 0;
        }
        
        // recursive case
        int numOccurInRest = numOccur(ch, str.substring(1));
        if (ch == str.charAt(0)) {
            return 1 + numOccurInRest;
        } else {
            return numOccurInRest;
        }
    }
    
    /*
     * removeVowels - a recursive method that creates the String
     * that results from removing vowels from the String str.
     * 
     * The main method includes two examples of using this method.
     *
     * You can also test this method by entering
     * StringRecursion.removeVowels(str) -- where str is replaced
     * by a string -- in the Interactions Pane.
     * 
     * NOTE: There are examples of debugging printlns included below,
     * but they have been commented out.
     */
    public static String removeVowels(String str) {
        // System.out.println("starting removeVowels(" + str + ")");
        if (str == null || str.equals("")) {
            // System.out.println("removeVowels(" + str + ") returns " + str);
            return str;
        }
        
        String removedFromRest = removeVowels(str.substring(1));
        char first = str.charAt(0);
        
        // We assume that the string is all lowercase.
        if (first == 'a' || first == 'e' || first == 'i'
                || first == 'o' || first == 'u') {
            // System.out.println("removeVowels(" + str + ") returns " + removedFromRest);
            return removedFromRest;
        } else {
            // System.out.println("removeVowels(" + str + ") returns " + (first + removedFromRest));
            return first + removedFromRest;
        }
    }
    
    /*
     * ****** ADD YOUR METHODS BELOW **********
     *
     * Make sure to use the exact method headers
     * given in the assignment.
     */
    
    
    /* printLetters- prints the string with commas in between each
     * letter.
     */
    
    public static void printLetters (String str) {
        if (str == null || str.equals("")) {
            System.out.println();
            return;
        }
        if (str.length() == 1) {
            System.out.print (str.charAt(0));
            return;
        }
        
        System.out.print(str.charAt(0)+",");
        printLetters(str.substring(1));
    }
    
    
    /* printTriangle- prints the string in the parameter vertically with 
     * each line deleting the last character of the last.
     */
    public static void printTriangle (String str) {
        if (str == null || str.equals("")) {
            return;
        }
        
        
        System.out.println (str);
        printTriangle (str.substring(0, str.length()-1));
    }
    
    /*reverse- returns the string that is formed by reversing the characters in a string
     */
    public static String reverse(String str) {
        if (str == null || str.equals("")) {
            return str;
        }
        String reversed= reverse(str.substring(0, str.length()-1));
        char lastLetter= str.charAt(str.length()-1);
        return lastLetter + reversed;
    }
    
    /*numDifferences- returns the number of differences in the string parameters
     */
    
    public static int numDifferences (String str1, String str2) {
        if (str1 == null || str2 == null) {
            throw new IllegalArgumentException("the parameters cannot be null");
        }
        if (str1.equals("")) {
            return str2.length();
        }
        if (str2.equals("")) {
            return str1.length();
        }
        
        if ((str1.equals( "")) && (str2.equals(""))) {
            return 0;
        }
        
        if (str1.charAt(0) == str2.charAt(0)) {
            str1.substring (1, str1.length());
            return numDifferences (str1.substring (1, str1.length()), str2.substring (1, str2.length()));
        }
        if (str1.charAt(0) != str2.charAt(0)) {
            return 1 + numDifferences (str1.substring (1, str1.length()), str2.substring (1, str2.length()));
        }
        return numDifferences(str1, str2);
    } 
    
    /*indexOf- returns the index of the first occurrences of a character in a string
     */
    public static int indexOf(char ch, String str) {
        if (str == null || str.equals ("")){
            return -1;
        }
        
        int numIndexOf= indexOf(ch, str.substring(1));
        if (str.charAt(0)==(ch)) {
            return 0;
        }
        else {
            return numIndexOf+1;
        }
    }

    
    
    
}
